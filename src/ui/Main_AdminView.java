/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import bd.Query;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import ticketsystem.Task;
import ticketsystem.Ticket;
import ticketsystem.User;
import output.*;
import ticketsystem.UserType;

/**
 *
 * @author izar
 */
public class Main_AdminView extends javax.swing.JFrame {

    Ticket selectedTicket = null;
    Task selectedTask = null;
    Query q;
    DefaultTableModel model;

    boolean allowTableSelListener = true;   // Evita que se habilite el tableSelectionListener 69420 veces cuando se hace un reload

    boolean clearedFilter = false;

    boolean adjusting;  // Para que no haya lios actualizando la lista de tareas de un ticket
    boolean techSel_adj;// Lo mismo pero para la tabla de selección de los técnicos

    /**
     * Creates new form MainWindow
     */
    public Main_AdminView() {
        initComponents();

        this.techSelection_frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.tasksHistory_frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        this.setLocationRelativeTo(null);   // Centra en la pantalla
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.setTitle(this.getTitle() + " - Login como " + (Login.loggedUser.getUserType().toString().toLowerCase()));

        this.setMinimumSize(this.getSize());

        // Actualiza ID
        statusbar_user_label.setText(statusbar_user_label.getText().replace("{ID}", "" + Login.loggedUser.getId()));

        // Tarea para actualizar la hora en la status bar cada segundo
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        TimerTask updateTime_task = new TimerTask() {
            @Override
            public void run() {
                dateTime_statusbar_label.setText(formatter.format(LocalDateTime.now()).toString());
            }
        };
        new Timer().scheduleAtFixedRate(updateTime_task, 0, 1000);

        // Permite seleccionar solo un ticket a la vez
        this.tickets_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Añade listener para actualizar las info
        ListSelectionModel cellSelectionModel = this.tickets_table.getSelectionModel();

        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if (allowTableSelListener) {
                    updateTicket();
                }
            }
        });

        // Carga los tickets
        model = (DefaultTableModel) this.tickets_table.getModel();

        q = new Query();

        try {
            dbReload();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error al cargar los tickets. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.tickets_table.requestFocus();

        updateTicket();

        this.tickets_table.setAutoCreateRowSorter(true);
        this.tasksHistory_table.setAutoCreateRowSorter(true);
        this.usersList_table.setAutoCreateRowSorter(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clientview_panel = new javax.swing.JPanel();
        id_view_label = new javax.swing.JLabel();
        date_view_label = new javax.swing.JLabel();
        creator_view_label = new javax.swing.JLabel();
        technician_view_label = new javax.swing.JLabel();
        priority_view_label = new javax.swing.JLabel();
        status_view_label = new javax.swing.JLabel();
        description_view_label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        description_view_ta = new javax.swing.JTextArea();
        taskHistory_view_btn = new javax.swing.JButton();
        data_id_view_label = new javax.swing.JLabel();
        data_date_view_label = new javax.swing.JLabel();
        data_creator_view_label = new javax.swing.JLabel();
        data_technician_view_label = new javax.swing.JLabel();
        data_priority_view_label = new javax.swing.JLabel();
        data_status_view_label = new javax.swing.JLabel();
        technicianview_panel = new javax.swing.JPanel();
        id_view_label1 = new javax.swing.JLabel();
        date_view_label1 = new javax.swing.JLabel();
        creator_view_label1 = new javax.swing.JLabel();
        technician_view_label1 = new javax.swing.JLabel();
        priority_view_label1 = new javax.swing.JLabel();
        status_view_label1 = new javax.swing.JLabel();
        description_view_label1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        description_view_ta1 = new javax.swing.JTextArea();
        taskHistory_view_btn1 = new javax.swing.JButton();
        data_id_view_label1 = new javax.swing.JLabel();
        data_date_view_label1 = new javax.swing.JLabel();
        data_creator_view_label1 = new javax.swing.JLabel();
        data_technician_view_label1 = new javax.swing.JLabel();
        data_status_view_label1 = new javax.swing.JLabel();
        data_priority_view_cb1 = new javax.swing.JComboBox<>();
        closeTicket_view_btn1 = new javax.swing.JButton();
        techSelection_frame = new javax.swing.JFrame();
        techSelection_panel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        techSelection_table = new javax.swing.JTable();
        selected_label = new javax.swing.JLabel();
        data_selected_label = new javax.swing.JLabel();
        techSelect_confirm_btn = new javax.swing.JButton();
        techSelect_cancel_btn = new javax.swing.JButton();
        techSelect_remove_btn = new javax.swing.JButton();
        tasksHistory_frame = new javax.swing.JFrame();
        jScrollPane6 = new javax.swing.JScrollPane();
        tasksHistory_table = new javax.swing.JTable();
        data_history_panel = new javax.swing.JPanel();
        date_history_label = new javax.swing.JLabel();
        creator_history_label = new javax.swing.JLabel();
        data_date_history_label = new javax.swing.JLabel();
        data_creator_history_label = new javax.swing.JLabel();
        description_history_label = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        description_history_ta = new javax.swing.JTextArea();
        tasksHistory_add_btn = new javax.swing.JButton();
        tasksHistory_del_btn = new javax.swing.JButton();
        addTask_frame = new javax.swing.JFrame();
        addTask_panel = new javax.swing.JPanel();
        addTask_desc_label = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        addTask_desc_ta = new javax.swing.JTextArea();
        addTask_confirm_btn = new javax.swing.JButton();
        addTask_cancel_btn = new javax.swing.JButton();
        addTicket_admin_frame = new javax.swing.JFrame();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addTicket_admin_creator_label = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        addTicket_admin_tech_cb = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        addTicket_admin_priority_cb = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        addTicket_admin_status_cb = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        addTicket_admin_scalability_cb = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        addTicket_admin_desc_ta = new javax.swing.JTextArea();
        addTicket_admin_confirm_btn = new javax.swing.JButton();
        addTicket_admin_cancel_btn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        usersList_frame = new javax.swing.JFrame();
        usersList_panel = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        usersList_table = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tickets_table = new javax.swing.JTable();
        filter_tf = new javax.swing.JTextField();
        filter_btn = new javax.swing.JButton();
        filter_selector_cb = new javax.swing.JComboBox<>();
        reset_btn = new javax.swing.JButton();
        delete_btn = new javax.swing.JButton();
        add_btn = new javax.swing.JButton();
        adminview_panel = new javax.swing.JPanel();
        id_view_label2 = new javax.swing.JLabel();
        date_view_label2 = new javax.swing.JLabel();
        creator_view_label2 = new javax.swing.JLabel();
        technician_view_label2 = new javax.swing.JLabel();
        priority_view_label2 = new javax.swing.JLabel();
        status_view_label2 = new javax.swing.JLabel();
        description_view_label2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        description_view_ta2 = new javax.swing.JTextArea();
        taskHistory_viewHistory = new javax.swing.JButton();
        data_id_view_label2 = new javax.swing.JLabel();
        data_date_view_label2 = new javax.swing.JLabel();
        data_creator_view_label2 = new javax.swing.JLabel();
        data_technician_view_label2 = new javax.swing.JLabel();
        data_priority_view_cb2 = new javax.swing.JComboBox<>();
        closeTicket_view_btn = new javax.swing.JButton();
        assignTech_view_btn2 = new javax.swing.JButton();
        data_status_view_cb2 = new javax.swing.JComboBox<>();
        scalability_view_label2 = new javax.swing.JLabel();
        data_scalability_view_cb2 = new javax.swing.JComboBox<>();
        data_description_update_btn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        statusbar_user_label = new javax.swing.JLabel();
        dateTime_statusbar_label = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jMenuBar1 = new javax.swing.JMenuBar();
        update_mi = new javax.swing.JMenu();
        forceDBReload_mi = new javax.swing.JMenuItem();
        export_menu = new javax.swing.JMenu();
        export_tickets_table_menu = new javax.swing.JMenu();
        export_tickets_PDF = new javax.swing.JMenuItem();
        export_ticket_details_menu = new javax.swing.JMenu();
        export_ticket_details_PDF = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        register_mi = new javax.swing.JMenuItem();
        usersList_mi = new javax.swing.JMenuItem();
        logout_mi = new javax.swing.JMenuItem();
        help_jm = new javax.swing.JMenu();
        info_mi = new javax.swing.JMenuItem();

        clientview_panel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        id_view_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        id_view_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        id_view_label.setText("ID");

        date_view_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        date_view_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        date_view_label.setText("Fecha de creación");

        creator_view_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        creator_view_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        creator_view_label.setText("Creado por (ID)");

        technician_view_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        technician_view_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        technician_view_label.setText("Técnico asignado");

        priority_view_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        priority_view_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        priority_view_label.setText("Prioridad");

        status_view_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        status_view_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        status_view_label.setText("Estado actual");

        description_view_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        description_view_label.setText("Descripción");

        description_view_ta.setColumns(20);
        description_view_ta.setRows(5);
        jScrollPane1.setViewportView(description_view_ta);

        taskHistory_view_btn.setText("Consultar historial");
        taskHistory_view_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskHistory_view_btnActionPerformed(evt);
            }
        });

        data_id_view_label.setText("ID");

        data_date_view_label.setText("FechaHora");

        data_creator_view_label.setText("IDCreador");

        data_technician_view_label.setText("IDTecnico");

        data_priority_view_label.setText("Prioridad");

        data_status_view_label.setText("Estado");

        javax.swing.GroupLayout clientview_panelLayout = new javax.swing.GroupLayout(clientview_panel);
        clientview_panel.setLayout(clientview_panelLayout);
        clientview_panelLayout.setHorizontalGroup(
            clientview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientview_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                    .addComponent(taskHistory_view_btn)
                    .addGroup(clientview_panelLayout.createSequentialGroup()
                        .addGroup(clientview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(status_view_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priority_view_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(technician_view_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(creator_view_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(date_view_label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(id_view_label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(description_view_label, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(clientview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(data_id_view_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(data_date_view_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(data_creator_view_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(data_technician_view_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(data_priority_view_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(data_status_view_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        clientview_panelLayout.setVerticalGroup(
            clientview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientview_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id_view_label)
                    .addComponent(data_id_view_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(date_view_label)
                    .addComponent(data_date_view_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(creator_view_label)
                    .addComponent(data_creator_view_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(technician_view_label)
                    .addComponent(data_technician_view_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priority_view_label)
                    .addComponent(data_priority_view_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(status_view_label)
                    .addComponent(data_status_view_label))
                .addGap(18, 18, 18)
                .addComponent(description_view_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(taskHistory_view_btn)
                .addContainerGap())
        );

        technicianview_panel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        id_view_label1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        id_view_label1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        id_view_label1.setText("ID");

        date_view_label1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        date_view_label1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        date_view_label1.setText("Fecha de creación");

        creator_view_label1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        creator_view_label1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        creator_view_label1.setText("Creado por (ID)");

        technician_view_label1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        technician_view_label1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        technician_view_label1.setText("Técnico asignado");

        priority_view_label1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        priority_view_label1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        priority_view_label1.setText("Prioridad");

        status_view_label1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        status_view_label1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        status_view_label1.setText("Estado actual");

        description_view_label1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        description_view_label1.setText("Descripción");

        description_view_ta1.setColumns(20);
        description_view_ta1.setRows(5);
        jScrollPane3.setViewportView(description_view_ta1);

        taskHistory_view_btn1.setText("Consultar historial");
        taskHistory_view_btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskHistory_view_btn1ActionPerformed(evt);
            }
        });

        data_id_view_label1.setText("ID");

        data_date_view_label1.setText("FechaHora");

        data_creator_view_label1.setText("IDCreador");

        data_technician_view_label1.setText("IDTecnico");

        data_status_view_label1.setText("Estado");

        data_priority_view_cb1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CRITICAL", "SERIOUS", "HIGH", "MEDIUM", "LOW" }));

        closeTicket_view_btn1.setText("Cerrar ticket");
        closeTicket_view_btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeTicket_view_btn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout technicianview_panelLayout = new javax.swing.GroupLayout(technicianview_panel);
        technicianview_panel.setLayout(technicianview_panelLayout);
        technicianview_panelLayout.setHorizontalGroup(
            technicianview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(technicianview_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(technicianview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                    .addGroup(technicianview_panelLayout.createSequentialGroup()
                        .addComponent(taskHistory_view_btn1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeTicket_view_btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(technicianview_panelLayout.createSequentialGroup()
                        .addGroup(technicianview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(status_view_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priority_view_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(technician_view_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(creator_view_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(date_view_label1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(id_view_label1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(description_view_label1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(technicianview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(data_id_view_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(data_date_view_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(data_creator_view_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(data_technician_view_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(data_status_view_label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(technicianview_panelLayout.createSequentialGroup()
                                .addComponent(data_priority_view_cb1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        technicianview_panelLayout.setVerticalGroup(
            technicianview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(technicianview_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(technicianview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id_view_label1)
                    .addComponent(data_id_view_label1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(technicianview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(date_view_label1)
                    .addComponent(data_date_view_label1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(technicianview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(creator_view_label1)
                    .addComponent(data_creator_view_label1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(technicianview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(technician_view_label1)
                    .addComponent(data_technician_view_label1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(technicianview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priority_view_label1)
                    .addComponent(data_priority_view_cb1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(technicianview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(status_view_label1)
                    .addComponent(data_status_view_label1))
                .addGap(18, 18, 18)
                .addComponent(description_view_label1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(technicianview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskHistory_view_btn1)
                    .addComponent(closeTicket_view_btn1))
                .addContainerGap())
        );

        techSelection_frame.setTitle("Seleccionar técnico");
        techSelection_frame.setMinimumSize(new java.awt.Dimension(450, 264));
        techSelection_frame.setPreferredSize(new java.awt.Dimension(450, 264));
        techSelection_frame.setResizable(false);
        techSelection_frame.setSize(new java.awt.Dimension(450, 264));

        techSelection_panel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        techSelection_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Apellido(s)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        techSelection_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        techSelection_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        techSelection_table.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(techSelection_table);
        techSelection_table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (techSelection_table.getColumnModel().getColumnCount() > 0) {
            techSelection_table.getColumnModel().getColumn(0).setMinWidth(3);
            techSelection_table.getColumnModel().getColumn(0).setPreferredWidth(8);
        }

        selected_label.setText("Seleccionado:");

        data_selected_label.setText(" ");

        techSelect_confirm_btn.setText("Confirmar");
        techSelect_confirm_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                techSelect_confirm_btnActionPerformed(evt);
            }
        });

        techSelect_cancel_btn.setText("Cancelar");
        techSelect_cancel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                techSelect_cancel_btnActionPerformed(evt);
            }
        });

        techSelect_remove_btn.setText("Eliminar asignación");
        techSelect_remove_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                techSelect_remove_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout techSelection_panelLayout = new javax.swing.GroupLayout(techSelection_panel);
        techSelection_panel.setLayout(techSelection_panelLayout);
        techSelection_panelLayout.setHorizontalGroup(
            techSelection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(techSelection_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(techSelection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(techSelection_panelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(selected_label, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(data_selected_label, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(techSelection_panelLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(techSelection_panelLayout.createSequentialGroup()
                        .addComponent(techSelect_remove_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addComponent(techSelect_cancel_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(techSelect_confirm_btn)
                        .addGap(17, 17, 17))))
        );
        techSelection_panelLayout.setVerticalGroup(
            techSelection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(techSelection_panelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(techSelection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(data_selected_label)
                    .addComponent(selected_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(techSelection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(techSelect_confirm_btn)
                    .addComponent(techSelect_cancel_btn)
                    .addComponent(techSelect_remove_btn))
                .addContainerGap())
        );

        javax.swing.GroupLayout techSelection_frameLayout = new javax.swing.GroupLayout(techSelection_frame.getContentPane());
        techSelection_frame.getContentPane().setLayout(techSelection_frameLayout);
        techSelection_frameLayout.setHorizontalGroup(
            techSelection_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, techSelection_frameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(techSelection_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        techSelection_frameLayout.setVerticalGroup(
            techSelection_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, techSelection_frameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(techSelection_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tasksHistory_frame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        tasksHistory_frame.setMinimumSize(new java.awt.Dimension(570, 480));

        tasksHistory_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Fecha/Hora", "Creador", "ID Ticket"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tasksHistory_table);
        tasksHistory_table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tasksHistory_table.getColumnModel().getColumnCount() > 0) {
            tasksHistory_table.getColumnModel().getColumn(0).setMinWidth(5);
            tasksHistory_table.getColumnModel().getColumn(0).setPreferredWidth(18);
            tasksHistory_table.getColumnModel().getColumn(2).setMinWidth(10);
            tasksHistory_table.getColumnModel().getColumn(2).setPreferredWidth(60);
            tasksHistory_table.getColumnModel().getColumn(3).setMinWidth(15);
            tasksHistory_table.getColumnModel().getColumn(3).setPreferredWidth(55);
        }

        data_history_panel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        data_history_panel.setMaximumSize(new java.awt.Dimension(32767, 800));

        date_history_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        date_history_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        date_history_label.setText("Fecha de creación");

        creator_history_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        creator_history_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        creator_history_label.setText("Creado por (ID)");

        data_date_history_label.setText("   ");

        data_creator_history_label.setText("   ");

        description_history_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        description_history_label.setText("Descripción");

        description_history_ta.setEditable(false);
        description_history_ta.setColumns(20);
        description_history_ta.setLineWrap(true);
        description_history_ta.setRows(5);
        description_history_ta.setWrapStyleWord(true);
        jScrollPane7.setViewportView(description_history_ta);

        javax.swing.GroupLayout data_history_panelLayout = new javax.swing.GroupLayout(data_history_panel);
        data_history_panel.setLayout(data_history_panelLayout);
        data_history_panelLayout.setHorizontalGroup(
            data_history_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(data_history_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(data_history_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(data_history_panelLayout.createSequentialGroup()
                        .addComponent(description_history_label, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(data_history_panelLayout.createSequentialGroup()
                        .addGroup(data_history_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                            .addGroup(data_history_panelLayout.createSequentialGroup()
                                .addGroup(data_history_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(data_history_panelLayout.createSequentialGroup()
                                        .addComponent(date_history_label)
                                        .addGap(10, 10, 10))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, data_history_panelLayout.createSequentialGroup()
                                        .addComponent(creator_history_label, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(data_history_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(data_creator_history_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(data_date_history_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        data_history_panelLayout.setVerticalGroup(
            data_history_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(data_history_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(data_history_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(data_date_history_label)
                    .addComponent(date_history_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(data_history_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(data_creator_history_label)
                    .addComponent(creator_history_label))
                .addGap(18, 18, 18)
                .addComponent(description_history_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7)
                .addContainerGap())
        );

        tasksHistory_add_btn.setText("Añadir...");
        tasksHistory_add_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tasksHistory_add_btnActionPerformed(evt);
            }
        });

        tasksHistory_del_btn.setText("Eliminar");
        tasksHistory_del_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tasksHistory_del_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tasksHistory_frameLayout = new javax.swing.GroupLayout(tasksHistory_frame.getContentPane());
        tasksHistory_frame.getContentPane().setLayout(tasksHistory_frameLayout);
        tasksHistory_frameLayout.setHorizontalGroup(
            tasksHistory_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksHistory_frameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tasksHistory_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tasksHistory_frameLayout.createSequentialGroup()
                        .addComponent(data_history_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(tasksHistory_frameLayout.createSequentialGroup()
                        .addComponent(tasksHistory_del_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tasksHistory_add_btn)
                        .addGap(14, 14, 14))))
        );
        tasksHistory_frameLayout.setVerticalGroup(
            tasksHistory_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tasksHistory_frameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tasksHistory_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addGroup(tasksHistory_frameLayout.createSequentialGroup()
                        .addComponent(data_history_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tasksHistory_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tasksHistory_add_btn)
                            .addComponent(tasksHistory_del_btn))))
                .addContainerGap())
        );

        addTask_frame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addTask_frame.setMinimumSize(new java.awt.Dimension(400, 320));
        addTask_frame.setResizable(false);

        addTask_desc_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        addTask_desc_label.setText("Descripción");

        addTask_desc_ta.setColumns(20);
        addTask_desc_ta.setLineWrap(true);
        addTask_desc_ta.setRows(5);
        addTask_desc_ta.setWrapStyleWord(true);
        jScrollPane8.setViewportView(addTask_desc_ta);

        addTask_confirm_btn.setText("Confirmar");
        addTask_confirm_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTask_confirm_btnActionPerformed(evt);
            }
        });

        addTask_cancel_btn.setText("Cancelar");
        addTask_cancel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTask_cancel_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addTask_panelLayout = new javax.swing.GroupLayout(addTask_panel);
        addTask_panel.setLayout(addTask_panelLayout);
        addTask_panelLayout.setHorizontalGroup(
            addTask_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addTask_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addTask_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addTask_panelLayout.createSequentialGroup()
                        .addComponent(addTask_desc_label)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addTask_panelLayout.createSequentialGroup()
                        .addComponent(addTask_cancel_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addTask_confirm_btn)))
                .addContainerGap())
        );
        addTask_panelLayout.setVerticalGroup(
            addTask_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTask_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addTask_desc_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addTask_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addTask_cancel_btn)
                    .addComponent(addTask_confirm_btn))
                .addContainerGap())
        );

        javax.swing.GroupLayout addTask_frameLayout = new javax.swing.GroupLayout(addTask_frame.getContentPane());
        addTask_frame.getContentPane().setLayout(addTask_frameLayout);
        addTask_frameLayout.setHorizontalGroup(
            addTask_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTask_frameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addTask_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        addTask_frameLayout.setVerticalGroup(
            addTask_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTask_frameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addTask_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        addTicket_admin_frame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addTicket_admin_frame.setMinimumSize(new java.awt.Dimension(508, 435));
        addTicket_admin_frame.setResizable(false);

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setText("Creador");

        addTicket_admin_creator_label.setText("ID + Nombre creador");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setText("Técnico");

        addTicket_admin_tech_cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTicket_admin_tech_cbActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel5.setText("Prioridad");

        addTicket_admin_priority_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Baja", "Media", "Alta", "Grave", "Crítica" }));

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel6.setText("Estado");

        addTicket_admin_status_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inicio", "Asignado", "En proceso", "Cerrado" }));

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel7.setText("Escalabilidad");

        addTicket_admin_scalability_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Básico", "Técnico", "Externo" }));

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel8.setText("Descripción");

        addTicket_admin_desc_ta.setColumns(20);
        addTicket_admin_desc_ta.setLineWrap(true);
        addTicket_admin_desc_ta.setRows(5);
        addTicket_admin_desc_ta.setWrapStyleWord(true);
        jScrollPane9.setViewportView(addTicket_admin_desc_ta);

        addTicket_admin_confirm_btn.setText("Confirmar");
        addTicket_admin_confirm_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTicket_admin_confirm_btnActionPerformed(evt);
            }
        });

        addTicket_admin_cancel_btn.setText("Cancelar");
        addTicket_admin_cancel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTicket_admin_cancel_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addTicket_admin_creator_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addTicket_admin_tech_cb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addTicket_admin_priority_cb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addTicket_admin_status_cb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addTicket_admin_scalability_cb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addTicket_admin_cancel_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addTicket_admin_confirm_btn)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(addTicket_admin_creator_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(addTicket_admin_tech_cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(addTicket_admin_priority_cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(addTicket_admin_status_cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(addTicket_admin_scalability_cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addTicket_admin_confirm_btn)
                    .addComponent(addTicket_admin_cancel_btn))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Creación de un nuevo ticket");

        javax.swing.GroupLayout addTicket_admin_frameLayout = new javax.swing.GroupLayout(addTicket_admin_frame.getContentPane());
        addTicket_admin_frame.getContentPane().setLayout(addTicket_admin_frameLayout);
        addTicket_admin_frameLayout.setHorizontalGroup(
            addTicket_admin_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTicket_admin_frameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addTicket_admin_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(addTicket_admin_frameLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        addTicket_admin_frameLayout.setVerticalGroup(
            addTicket_admin_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addTicket_admin_frameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        usersList_frame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        usersList_frame.setTitle("Registro de usuarios");
        usersList_frame.setMinimumSize(new java.awt.Dimension(591, 310));
        usersList_frame.setPreferredSize(new java.awt.Dimension(591, 310));
        usersList_frame.setSize(new java.awt.Dimension(591, 310));

        usersList_panel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        usersList_table.setAutoCreateRowSorter(true);
        usersList_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Apellido(s)", "Username", "Fecha de Nacimiento", "Tipo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        usersList_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane10.setViewportView(usersList_table);
        usersList_table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (usersList_table.getColumnModel().getColumnCount() > 0) {
            usersList_table.getColumnModel().getColumn(0).setMinWidth(3);
            usersList_table.getColumnModel().getColumn(0).setPreferredWidth(8);
        }

        javax.swing.GroupLayout usersList_panelLayout = new javax.swing.GroupLayout(usersList_panel);
        usersList_panel.setLayout(usersList_panelLayout);
        usersList_panelLayout.setHorizontalGroup(
            usersList_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usersList_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                .addContainerGap())
        );
        usersList_panelLayout.setVerticalGroup(
            usersList_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usersList_panelLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout usersList_frameLayout = new javax.swing.GroupLayout(usersList_frame.getContentPane());
        usersList_frame.getContentPane().setLayout(usersList_frameLayout);
        usersList_frameLayout.setHorizontalGroup(
            usersList_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usersList_frameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usersList_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        usersList_frameLayout.setVerticalGroup(
            usersList_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usersList_frameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usersList_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ticket Handling System");
        setMinimumSize(new java.awt.Dimension(898, 474));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        tickets_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Fecha/Hora", "Creado por", "Descripción"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tickets_table);
        if (tickets_table.getColumnModel().getColumnCount() > 0) {
            tickets_table.getColumnModel().getColumn(0).setMinWidth(3);
            tickets_table.getColumnModel().getColumn(0).setPreferredWidth(12);
            tickets_table.getColumnModel().getColumn(1).setMinWidth(35);
            tickets_table.getColumnModel().getColumn(2).setMinWidth(3);
            tickets_table.getColumnModel().getColumn(2).setPreferredWidth(12);
        }

        filter_tf.setText("Filtrar...");
        filter_tf.setToolTipText("Filtrar por el contenido de este campo");
        filter_tf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                filter_tfFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                filter_tfFocusLost(evt);
            }
        });
        filter_tf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filter_tfMouseClicked(evt);
            }
        });
        filter_tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filter_tfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filter_tfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filter_tfKeyTyped(evt);
            }
        });

        filter_btn.setText("Buscar");
        filter_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_btnActionPerformed(evt);
            }
        });

        filter_selector_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Fecha/Hora", "Creador", "Nombre Creador", "Técnico", "Nombre Técnico", "Prioridad", "Estado", "Escalabilidad", "Descripción" }));
        filter_selector_cb.setToolTipText("");

        reset_btn.setText("Reset");
        reset_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_btnActionPerformed(evt);
            }
        });

        delete_btn.setText("Eliminar");
        delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btnActionPerformed(evt);
            }
        });

        add_btn.setText("Añadir...");
        add_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filter_selector_cb, 0, 121, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filter_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filter_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reset_btn)
                .addGap(8, 8, 8))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(delete_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add_btn)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filter_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filter_btn)
                    .addComponent(filter_selector_cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reset_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete_btn)
                    .addComponent(add_btn))
                .addGap(6, 6, 6))
        );

        adminview_panel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        id_view_label2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        id_view_label2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        id_view_label2.setText("ID");

        date_view_label2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        date_view_label2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        date_view_label2.setText("Fecha de creación");

        creator_view_label2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        creator_view_label2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        creator_view_label2.setText("Creado por");

        technician_view_label2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        technician_view_label2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        technician_view_label2.setText("Técnico asignado");

        priority_view_label2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        priority_view_label2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        priority_view_label2.setText("Prioridad");

        status_view_label2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        status_view_label2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        status_view_label2.setText("Estado actual");

        description_view_label2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        description_view_label2.setText("Descripción");

        description_view_ta2.setColumns(20);
        description_view_ta2.setLineWrap(true);
        description_view_ta2.setRows(5);
        description_view_ta2.setWrapStyleWord(true);
        jScrollPane4.setViewportView(description_view_ta2);

        taskHistory_viewHistory.setText("Consultar historial");
        taskHistory_viewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskHistory_viewHistoryActionPerformed(evt);
            }
        });

        data_id_view_label2.setText("ID");

        data_date_view_label2.setText("FechaHora");

        data_creator_view_label2.setText("IDCreador");

        data_technician_view_label2.setText("IDTecnico");

        data_priority_view_cb2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Baja", "Media", "Alta", "Grave", "Crítica" }));
        data_priority_view_cb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                data_priority_view_cb2ActionPerformed(evt);
            }
        });

        closeTicket_view_btn.setText("Cerrar ticket");
        closeTicket_view_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeTicket_view_btnActionPerformed(evt);
            }
        });

        assignTech_view_btn2.setText("Asignar...");
        assignTech_view_btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignTech_view_btn2ActionPerformed(evt);
            }
        });

        data_status_view_cb2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inicio", "Asignado", "En proceso", "Cerrado" }));
        data_status_view_cb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                data_status_view_cb2ActionPerformed(evt);
            }
        });

        scalability_view_label2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        scalability_view_label2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        scalability_view_label2.setText("Escalabilidad");

        data_scalability_view_cb2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Básico", "Técnico", "Externo" }));
        data_scalability_view_cb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                data_scalability_view_cb2ActionPerformed(evt);
            }
        });

        data_description_update_btn.setText("Actualizar");
        data_description_update_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                data_description_update_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminview_panelLayout = new javax.swing.GroupLayout(adminview_panel);
        adminview_panel.setLayout(adminview_panelLayout);
        adminview_panelLayout.setHorizontalGroup(
            adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminview_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(adminview_panelLayout.createSequentialGroup()
                        .addComponent(taskHistory_viewHistory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeTicket_view_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(adminview_panelLayout.createSequentialGroup()
                        .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(scalability_view_label2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(status_view_label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priority_view_label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(technician_view_label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(creator_view_label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(date_view_label2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(id_view_label2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(description_view_label2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(data_id_view_label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(data_date_view_label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(data_creator_view_label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(adminview_panelLayout.createSequentialGroup()
                                .addComponent(data_technician_view_label2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(assignTech_view_btn2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(adminview_panelLayout.createSequentialGroup()
                                .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(data_priority_view_cb2, 0, 120, Short.MAX_VALUE)
                                    .addComponent(data_status_view_cb2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(data_scalability_view_cb2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminview_panelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(data_description_update_btn)))))
                .addContainerGap())
        );
        adminview_panelLayout.setVerticalGroup(
            adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminview_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id_view_label2)
                    .addComponent(data_id_view_label2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(date_view_label2)
                    .addComponent(data_date_view_label2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(creator_view_label2)
                    .addComponent(data_creator_view_label2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(technician_view_label2)
                    .addComponent(data_technician_view_label2)
                    .addComponent(assignTech_view_btn2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priority_view_label2)
                    .addComponent(data_priority_view_cb2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(status_view_label2)
                    .addComponent(data_status_view_cb2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scalability_view_label2)
                    .addComponent(data_scalability_view_cb2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(description_view_label2)
                    .addComponent(data_description_update_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(adminview_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskHistory_viewHistory)
                    .addComponent(closeTicket_view_btn))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(adminview_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(adminview_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setAlignmentY(1.0F);

        statusbar_user_label.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        statusbar_user_label.setText("Login efectuado con ID {ID}");

        dateTime_statusbar_label.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dateTime_statusbar_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dateTime_statusbar_label.setText("11-11-1111 11:11:11");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusbar_user_label, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dateTime_statusbar_label, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(statusbar_user_label, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(dateTime_statusbar_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        update_mi.setText("File");
        update_mi.setToolTipText("Recarga manualmente los tickets");

        forceDBReload_mi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        forceDBReload_mi.setText("Actualizar");
        forceDBReload_mi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceDBReload_miActionPerformed(evt);
            }
        });
        update_mi.add(forceDBReload_mi);

        export_menu.setText("Exportar...");

        export_tickets_table_menu.setText("Tabla de tickets actual");

        export_tickets_PDF.setText("Documento PDF");
        export_tickets_PDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export_tickets_PDFActionPerformed(evt);
            }
        });
        export_tickets_table_menu.add(export_tickets_PDF);

        export_menu.add(export_tickets_table_menu);

        export_ticket_details_menu.setText("Detalles y tareas del ticket");

        export_ticket_details_PDF.setText("Documento PDF");
        export_ticket_details_PDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export_ticket_details_PDFActionPerformed(evt);
            }
        });
        export_ticket_details_menu.add(export_ticket_details_PDF);

        export_menu.add(export_ticket_details_menu);

        update_mi.add(export_menu);
        update_mi.add(jSeparator1);

        register_mi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        register_mi.setText("Registrar nuevo usuario...");
        register_mi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                register_miActionPerformed(evt);
            }
        });
        update_mi.add(register_mi);

        usersList_mi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        usersList_mi.setText("Registro de usuarios");
        usersList_mi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersList_miActionPerformed(evt);
            }
        });
        update_mi.add(usersList_mi);

        logout_mi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        logout_mi.setText("Logout");
        logout_mi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_miActionPerformed(evt);
            }
        });
        update_mi.add(logout_mi);

        jMenuBar1.add(update_mi);

        help_jm.setText("Ayuda");

        info_mi.setText("Informaciones");
        info_mi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                info_miActionPerformed(evt);
            }
        });
        help_jm.add(info_mi);

        jMenuBar1.add(help_jm);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filler1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int reply = JOptionPane.showConfirmDialog(null, "¿Estás seguro/a de querer salir?", "Salir", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void logout_miActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_miActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "¿Estás seguro/a de querer salir?", "Salir", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            this.dispose();
            new Login().setVisible(true);
        }
    }//GEN-LAST:event_logout_miActionPerformed

    private void info_miActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_info_miActionPerformed
        JOptionPane.showMessageDialog(this,
                "Práctica individual de Administración de Sistemas Informáticos\nDesarrollada por Izar Castorina\nUIB, 2020/2021", "Informaciones", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_info_miActionPerformed

    private void taskHistory_view_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskHistory_view_btnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taskHistory_view_btnActionPerformed

    private void taskHistory_view_btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskHistory_view_btn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taskHistory_view_btn1ActionPerformed

    private void closeTicket_view_btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeTicket_view_btn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_closeTicket_view_btn1ActionPerformed

    private void taskHistory_viewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskHistory_viewHistoryActionPerformed

        this.tasksHistory_frame.setLocationRelativeTo(null);
        this.tasksHistory_frame.setVisible(true);
        this.tasksHistory_frame.requestFocus();
        this.tasksHistory_table.requestFocus();
        updateTasks();
        // Añade listener para actualizar las info
        ListSelectionModel cellSelectionModel = this.tasksHistory_table.getSelectionModel();
        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {

                if (adjusting) {
                    return;
                }

                int IDTsk = (int) tasksHistory_table.getValueAt(tasksHistory_table.getSelectedRow(), 0);

                Task t = null;
                try {
                    t = q.readTask(IDTsk);
                    data_date_history_label.setText(t.getDateTimeString());
                    data_creator_history_label.setText(t.getUserID() + "");
                } catch (SQLException ex) {
                    System.out.println("AVISO - t es null! (Approx linea 1272)");
                    description_history_ta.setText("");
                    Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (t != null) {
                    selectedTask = t;
                    description_history_ta.setText(t.getDescription());
                }

            }

        });
        if (this.tasksHistory_table.getModel().getRowCount() > 0) {
            cellSelectionModel.setSelectionInterval(0, 0);
        }

    }//GEN-LAST:event_taskHistory_viewHistoryActionPerformed

    private void putTickets(ArrayList<Ticket> tickets) {

        if (tickets == null) {
            return;
        }

        if (tickets.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Ningún ticket encontrado con los parámetros especificados.", "Ninguna correspondencia", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        allowTableSelListener = false;

        if (this.tickets_table.getRowCount() > 0) {
            DefaultTableModel dtm = (DefaultTableModel) this.tickets_table.getModel();
            dtm.setRowCount(0);
        }

        for (Ticket t : tickets) {
            Object[] row = {t.getId(), t.getDatetime().format(Ticket.formatter), t.getCreator(), t.getDescription()};
            model.addRow(row);
        }

        if (tickets.size() > 0) {
            this.tickets_table.setRowSelectionInterval(0, 0);
        }

        allowTableSelListener = true;
    }

    // Rellena la tabla de tareas
    private void updateTasks() {
        try {

            adjusting = true;

            ArrayList<Task> tasks = q.readTasksByID(this.selectedTicket.getId());
            System.out.println("DEBUG - Leidos " + tasks.size() + " para el ticket " + this.selectedTicket.getId());

            if (tasks == null) {
                System.out.println("ERROR - tasks es null! Approx linea 1244");
                return;
            }

            DefaultTableModel dtm = (DefaultTableModel) this.tasksHistory_table.getModel();

            if (this.tasksHistory_table.getRowCount() > 0) {
                System.out.println("DEBUG - Tabla Tasks - Ya hay presentes, eliminando...");
                dtm.setRowCount(0);

            }
            data_date_history_label.setText("");
            data_creator_history_label.setText("");
            description_history_ta.setText("");

            for (Task t : tasks) {
                Object[] row = new Object[]{t.getTaskID(), t.getDateTimeString(), t.getUserID(), t.getTicketID()};
                dtm.addRow(row);

            }

            adjusting = false;
        } catch (SQLException ex) {
            Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    private void closeTicket_view_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeTicket_view_btnActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "¿Estás seguro/a de querer cerrar el ticket " + selectedTicket.getId() + "?", "Cerrar ticket", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            try {
                q.UpdateStatus(selectedTicket.getId(), 3);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                        "Error al actualizar el estado del ticket. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        updateTicket();
    }//GEN-LAST:event_closeTicket_view_btnActionPerformed

    private void register_miActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_register_miActionPerformed
        // TODO add your handling code here:
        new Register().setVisible(true);
        this.setEnabled(false);
    }//GEN-LAST:event_register_miActionPerformed

    private void forceDBReload_miActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forceDBReload_miActionPerformed
        try {
            dbReload();
        } catch (SQLException ex) {
            Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_forceDBReload_miActionPerformed

    private void data_priority_view_cb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_data_priority_view_cb2ActionPerformed
        try {
            if (this.data_priority_view_cb2.hasFocus()) {
                // Actualizar prioridad del ticket

                q.UpdatePriority(selectedTicket.getId(), data_priority_view_cb2.getSelectedIndex());
            } else {
                return;
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error al actualizar la prioridad del ticket. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("DEBUG - Actualizada prioridad para el ticket " + selectedTicket.getId());
        updateTicket();
    }//GEN-LAST:event_data_priority_view_cb2ActionPerformed

    private void data_status_view_cb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_data_status_view_cb2ActionPerformed
        try {
            if (this.data_status_view_cb2.hasFocus()) {
                // Actualizar estado del ticket
                q.UpdateStatus(selectedTicket.getId(), data_status_view_cb2.getSelectedIndex());
            } else {
                return;
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error al actualizar el estado del ticket. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("DEBUG - Actualizado estado para el ticket " + selectedTicket.getId());
        updateTicket();
    }//GEN-LAST:event_data_status_view_cb2ActionPerformed

    private void data_scalability_view_cb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_data_scalability_view_cb2ActionPerformed
        try {
            if (this.data_scalability_view_cb2.hasFocus()) {
                // Actualizar escalabilidad del ticket
                q.UpdateScalability(selectedTicket.getId(), data_scalability_view_cb2.getSelectedIndex());
            } else {
                return;
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error al actualizar la escalabilidad del ticket. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("DEBUG - Actualizada escalabilidad para el ticket " + selectedTicket.getId());
        updateTicket();
    }//GEN-LAST:event_data_scalability_view_cb2ActionPerformed

    private void assignTech_view_btn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignTech_view_btn2ActionPerformed
        try {

            techSel_adj = true;

            // Abre la ventana para asignar técnico
            this.techSelection_frame.setLocationRelativeTo(null);
            this.techSelection_frame.setVisible(true);
            this.techSelection_frame.requestFocus();

            if (this.techSelection_table.getRowCount() > 0) {
                DefaultTableModel dtm = (DefaultTableModel) this.techSelection_table.getModel();
                dtm.setRowCount(0);
            }

            ArrayList<User> technicians = q.readAllTechnicians();

            DefaultTableModel dfm = (DefaultTableModel) this.techSelection_table.getModel();

            for (User u : technicians) {
                Object[] row = {u.getId(), u.getName(), u.getSurname()};
                dfm.addRow(row);
            }

            techSel_adj = false;

            // Añade listener para actualizar las info
            ListSelectionModel cellSelectionModel = this.techSelection_table.getSelectionModel();

            cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {

                    if (!techSel_adj) {

                        String name = (String) techSelection_table.getValueAt(techSelection_table.getSelectedRow(), 1);
                        String surname = (String) techSelection_table.getValueAt(techSelection_table.getSelectedRow(), 2);

                        data_selected_label.setText(name + " " + surname);
                    }
                }

            });

            techSel_adj = true;
            if (technicians.size() > 0) {
                cellSelectionModel.setSelectionInterval(0, 0);
            }
            techSel_adj = false;
        } catch (SQLException ex) {
            Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_assignTech_view_btn2ActionPerformed

    private void filter_tfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filter_tfMouseClicked

    }//GEN-LAST:event_filter_tfMouseClicked

    private void filter_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_btnActionPerformed
        try {
            // Filtrar los tickets según el texto introducido
            String filter = filter_tf.getText().strip();
            int selected = filter_selector_cb.getSelectedIndex();
            ArrayList<Ticket> filtered = new ArrayList<Ticket>();

            System.out.println("DEBUG - selected index cb: " + selected);

            switch (selected) {
                // ID
                case 0:
                    int id = Integer.parseInt(filter);
                    Ticket t = q.readTicket(id);
                    if (t != null) {
                        filtered.add(q.readTicket(id));
                    }
                    break;
                // Fecha/Hora
                case 1:
                    filtered = q.readTicketsByDateTime(filter);
                    break;
                // Creador
                case 2:
                    int creator = Integer.parseInt(filter);
                    filtered = q.readUserTickets(creator);
                    break;
                // Nombre Creador
                case 3:
                    filtered = q.readTicketsByUserName(filter);
                    break;
                // Técnico
                case 4:
                    int tech = Integer.parseInt(filter);
                    filtered = q.readTechTickets(tech);
                    break;
                // Nombre Técnico
                case 5:
                    filtered = q.readTicketsByTechName(filter);
                    break;
                // Prioridad
                case 6:
                    switch (filter.toLowerCase()) {
                        case "baja":
                            filtered = q.readTicketsByPriority(0);
                            break;
                        case "media":
                            filtered = q.readTicketsByPriority(1);
                            break;
                        case "alta":
                            filtered = q.readTicketsByPriority(2);
                            break;
                        case "grave":
                            filtered = q.readTicketsByPriority(3);
                            break;
                        case "crítica":
                            filtered = q.readTicketsByPriority(4);
                            break;
                        case "critica":
                            filtered = q.readTicketsByPriority(4);
                            break;
                    }
                    break;
                // Estado
                case 7:
                    switch (filter.toLowerCase()) {
                        case "inicio":
                            filtered = q.readTicketsByStatus(0);
                            break;
                        case "asignado":
                            filtered = q.readTicketsByStatus(1);
                            break;
                        case "en proceso":
                            filtered = q.readTicketsByStatus(2);
                            break;
                        case "en curso":
                            filtered = q.readTicketsByStatus(2);
                            break;
                        case "finalizado":
                            filtered = q.readTicketsByStatus(3);
                            break;
                        case "cerrado":
                            filtered = q.readTicketsByStatus(3);
                            break;
                    }
                    break;
                // Escalabilidad
                case 8:
                    switch (filter.toLowerCase()) {
                        case "basico":
                            filtered = q.readTicketsByScalability(0);
                            break;
                        case "básico":
                            filtered = q.readTicketsByScalability(0);
                            break;
                        case "técnico":
                            filtered = q.readTicketsByScalability(1);
                            break;
                        case "tecnico":
                            filtered = q.readTicketsByScalability(1);
                            break;
                        case "externo":
                            filtered = q.readTicketsByScalability(2);
                            break;
                    }
                    break;
                // Descripción
                case 9:
                    filtered = q.readTicketsByDescription(filter);
                    break;
            }

            putTickets(filtered);
        } catch (SQLException ex) {
            Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_filter_btnActionPerformed

    private void reset_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_btnActionPerformed
        filter_tf.setText("Filtrar...");
        clearedFilter = false;
        try {
            dbReload();
        } catch (SQLException ex) {
            Logger.getLogger(Main_AdminView.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_reset_btnActionPerformed

    // Añadir nueva tarea, crea la ventana donde poner la descripción
    private void tasksHistory_add_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tasksHistory_add_btnActionPerformed
        this.addTask_frame.setLocationRelativeTo(null);
        this.addTask_frame.setVisible(true);
        this.addTask_frame.requestFocus();
        this.addTask_desc_ta.requestFocus();
        this.addTask_desc_ta.setText("");
    }//GEN-LAST:event_tasksHistory_add_btnActionPerformed

    private void tasksHistory_del_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tasksHistory_del_btnActionPerformed
        try {
            int reply = JOptionPane.showConfirmDialog(null, "¿Estás seguro/a de querer borrar esta tarea?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {

                // TODO: Cancelar task seleccionado
                q.removeTask(this.selectedTask.getTaskID());
                this.selectedTask = null;

                // Actualiza la tabla
                updateTasks();
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error al eliminar esta tarea. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Main_AdminView.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tasksHistory_del_btnActionPerformed

    private void addTask_cancel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTask_cancel_btnActionPerformed
        this.addTask_frame.dispose();
    }//GEN-LAST:event_addTask_cancel_btnActionPerformed

    private void addTask_confirm_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTask_confirm_btnActionPerformed

        try {
            String desc = this.addTask_desc_ta.getText();
            int ticketID = this.selectedTicket.getId();
            int userID = Login.loggedUser.getId();

            Task toWrite = new Task(desc, ticketID, userID);
            q.addTask(ticketID, toWrite);

            JOptionPane.showMessageDialog(this,
                    "La tarea ha sido registrada correctamente.", "Tarea añadida", JOptionPane.PLAIN_MESSAGE);

            this.addTask_frame.dispose();
            this.tasksHistory_frame.setVisible(true);
            updateTasks();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error al añadir esta nueva tarea al ticket. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Main_AdminView.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_addTask_confirm_btnActionPerformed

    // Elimina el ticket seleccionado
    private void delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btnActionPerformed
        try {
            int reply = JOptionPane.showConfirmDialog(null, "¿Estás seguro/a de querer borrar este ticket?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {

                // TODO: Cancelar task seleccionado
                q.removeTicket(this.selectedTicket.getId());
                this.selectedTicket = null;

                dbReload();

                // Actualiza la tabla
                updateTicket();
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error al eliminar este ticket. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Main_AdminView.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_delete_btnActionPerformed

    // Añadir nuevo ticket a la BD
    private void add_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_btnActionPerformed
        try {
            this.addTicket_admin_frame.setLocationRelativeTo(null);
            this.addTicket_admin_frame.setVisible(true);
            this.addTicket_admin_frame.requestFocus();

            // Rellena info creador
            this.addTicket_admin_creator_label.setText(Login.loggedUser.getId() + " - " + Login.loggedUser.getName()
                    + " " + Login.loggedUser.getSurname() + " (" + Login.loggedUser.getUserType().toString() + ")");

            // Rellena el combobox con los técnicos disponibles
            // Elimina por si acaso hay elementos
            this.addTicket_admin_tech_cb.removeAllItems();

            // Lee todos los técnicos y los ordena por ID
            ArrayList<User> techs = q.readAllTechnicians();
            Collections.sort(techs, new Comparator<User>() {
                @Override
                public int compare(User o1, User o2) {
                    return o1.getId() - o2.getId();
                }
            });

            // Añade los técnicos disponibles
            this.addTicket_admin_tech_cb.addItem("No asignar");
            for (User u : techs) {
                String s = u.getId() + " - " + u.getName() + " " + u.getSurname();
                this.addTicket_admin_tech_cb.addItem(s);
            }

            // Reset de los combo boxes y del text area
            this.addTicket_admin_tech_cb.setSelectedIndex(0);
            this.addTicket_admin_priority_cb.setSelectedIndex(0);
            this.addTicket_admin_scalability_cb.setSelectedIndex(0);
            this.addTicket_admin_status_cb.setSelectedIndex(0);
            this.addTicket_admin_tech_cb.setSelectedIndex(0);
            this.addTicket_admin_desc_ta.setText("");

        } catch (SQLException ex) {
            Logger.getLogger(Main_AdminView.class
                    .getName()).log(Level.SEVERE, null, ex);
            this.addTicket_admin_frame.dispose();
        }

    }//GEN-LAST:event_add_btnActionPerformed

    private void addTicket_admin_tech_cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTicket_admin_tech_cbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addTicket_admin_tech_cbActionPerformed

    // Cancela el proceso de creación del ticket
    private void addTicket_admin_cancel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTicket_admin_cancel_btnActionPerformed
        this.addTicket_admin_frame.dispose();
        this.requestFocus();
    }//GEN-LAST:event_addTicket_admin_cancel_btnActionPerformed

    // Confirmación de creación del ticket
    private void addTicket_admin_confirm_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTicket_admin_confirm_btnActionPerformed
        try {
            int reply = JOptionPane.showConfirmDialog(null, "¿Añadir el ticket a la base de datos?", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (reply != JOptionPane.YES_OPTION) {  // Si no es si, se sale
                return;
            }

            int scalability = this.addTicket_admin_scalability_cb.getSelectedIndex();
            int technician = this.addTicket_admin_tech_cb.getSelectedIndex();

            if (technician != 0) {    // Si se selecciona algo diferente de "No asignar"

                String s = (String) this.addTicket_admin_tech_cb.getSelectedItem();
                s = s.substring(0, s.indexOf("-") - 1);
                technician = Integer.parseInt(s);
            }

            if (scalability == 1 && technician == 0) {
                JOptionPane.showMessageDialog(this,
                        "La escalabilidad está marcada como \"Técnico\", pero no ha sido seleccionado ningún técnico. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
                this.addTicket_admin_frame.requestFocus();
                return;
            }

            // t.getCreator() + "'), '" + t.getTechnician()
            // + "', '" + t.getPriorityInt() + "', '" + t.getStatusInt() + "', '" + t.getScalabilityInt() + "', '" + t.getDescription() + "')";
            // int creator, int technician, int priority, int status, int scalability, String description
            int creator = Login.loggedUser.getId();

            int priority = this.addTicket_admin_priority_cb.getSelectedIndex();
            int status = this.addTicket_admin_status_cb.getSelectedIndex();

            String description = this.addTicket_admin_desc_ta.getText().strip();

            Ticket t = new Ticket(creator, technician, priority, status, scalability, description);

            q.writeTicketAutoFill(t);

            JOptionPane.showMessageDialog(this,
                    "El ticket ha sido añadido a la base de datos.", "Ticket añadido a BD", JOptionPane.PLAIN_MESSAGE);

            dbReload();
            updateTicket();

            this.addTicket_admin_frame.dispose();
            this.requestFocus();

        } catch (SQLException ex) {
            Logger.getLogger(Main_AdminView.class
                    .getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    "Error al añadir este ticket. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_addTicket_admin_confirm_btnActionPerformed

    // Actualiza la descripción del ticket
    private void data_description_update_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_data_description_update_btnActionPerformed
        try {

            int selected = this.tickets_table.getSelectedRow();

            // Actualizar estado del ticket
            q.UpdateDescription(selectedTicket.getId(), description_view_ta2.getText());
            dbReload();

            // Vuelve a seleccionar el ticket
            try {
                this.tickets_table.setRowSelectionInterval(selected, selected);
            } catch (Exception f) {
                this.tickets_table.setRowSelectionInterval(0, 0);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error al actualizar la descripción del ticket. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Main_AdminView.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("DEBUG - Actualizada descripción para el ticket " + selectedTicket.getId());
        updateTicket();

    }//GEN-LAST:event_data_description_update_btnActionPerformed

    private void filter_tfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filter_tfFocusGained
        if (!clearedFilter) {
            filter_tf.setText("");
            clearedFilter = true;
        }
    }//GEN-LAST:event_filter_tfFocusGained

    private void filter_tfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filter_tfFocusLost
        if (clearedFilter && filter_tf.getText() == "") {
            filter_tf.setText("Filtrar...");
            clearedFilter = false;
        }
    }//GEN-LAST:event_filter_tfFocusLost

    private void filter_tfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filter_tfKeyTyped

    }//GEN-LAST:event_filter_tfKeyTyped

    private void filter_tfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filter_tfKeyReleased

    }//GEN-LAST:event_filter_tfKeyReleased

    private void filter_tfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filter_tfKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            filter_btnActionPerformed(null);
        }
    }//GEN-LAST:event_filter_tfKeyPressed

    // Exporta detalles del ticket actual
    private void export_ticket_details_PDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export_ticket_details_PDFActionPerformed
        String filename = "\"Ticket " + selectedTicket.getId() + " - " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH-mm-ss")) + ".pdf\"";

        try {
            new PDFOut().WriteTicketDetails(selectedTicket);
        } catch (IOException | SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error durante la escritura del fichero PDF.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
        }

        JOptionPane.showMessageDialog(this,
                "Fichero PDF " + filename + " creado con éxito en la carpeta \"output\".", "Exportación completada", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_export_ticket_details_PDFActionPerformed

    // Exporta tabla de tickets actual a PDF
    private void export_tickets_PDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export_tickets_PDFActionPerformed
        int cols = this.tickets_table.getModel().getColumnCount();
        int rows = this.tickets_table.getModel().getRowCount();
        String[][] data = new String[rows + 1][cols];
        data[0][0] = "ID";
        data[0][1] = "Fecha/Hora";
        data[0][2] = "Creado por";
        data[0][3] = "Descripción";

        for (int i = 0; i < cols; i++) {
            for (int j = 1; j <= rows; j++) {
                data[j][i] = this.tickets_table.getValueAt(j - 1, i).toString();
            }
        }

        String filename = "\"" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH-mm-ss")) + ".pdf\"";
        try {
            new PDFOut().WriteTicketTable(data);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error durante la escritura del fichero PDF.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
        }

        JOptionPane.showMessageDialog(this,
                "Fichero PDF " + filename + " creado con éxito en la carpeta \"output\".", "Exportación completada", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_export_tickets_PDFActionPerformed

    private void techSelect_confirm_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_techSelect_confirm_btnActionPerformed
        int id = (int) techSelection_table.getValueAt(techSelection_table.getSelectedRow(), 0);
        String name = (String) techSelection_table.getValueAt(techSelection_table.getSelectedRow(), 1);
        String surname = (String) techSelection_table.getValueAt(techSelection_table.getSelectedRow(), 2);

        int reply = JOptionPane.showConfirmDialog(null, "¿Estás seguro/a de querer asignar el ticket " + selectedTicket.getId() + " al técnico " + name + " " + surname + "?", "Asignar técnico", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            try {
                System.out.println("DEBUG - Intentando asignar técnico " + id + " al ticket " + selectedTicket.getId());
                q.UpdateTechnician(selectedTicket.getId(), id);

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                        "Error al asignar el técnico. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        updateTicket();
        this.techSelection_frame.dispose();
    }//GEN-LAST:event_techSelect_confirm_btnActionPerformed

    private void techSelect_cancel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_techSelect_cancel_btnActionPerformed
        this.techSelection_frame.dispose();
    }//GEN-LAST:event_techSelect_cancel_btnActionPerformed

    // Elimina asignación de técnico
    private void techSelect_remove_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_techSelect_remove_btnActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "¿Estás seguro/a de querer eliminar la asignación del técnico en el ticket " + selectedTicket.getId() + "?", "Eliminar asignación técnico", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {

            if (selectedTicket.getScalabilityInt() == 1) {
                JOptionPane.showMessageDialog(this,
                        "No es posible eliminar la asignación de un técnico si la escalabilidad del ticket está actualmente en \"Técnico\". Modificar la escalabilidad y reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                System.out.println("DEBUG - Intentando remover técnico del ticket " + selectedTicket.getId());
                q.removeTechnician(selectedTicket.getId());

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                        "Error al eliminar la asignación del técnico. Reintentar.", "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(Main_AdminView.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
        updateTicket();
        this.techSelection_frame.dispose();
    }//GEN-LAST:event_techSelect_remove_btnActionPerformed

    private void usersList_miActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersList_miActionPerformed
        this.usersList_frame.setLocationRelativeTo(null);
        this.usersList_frame.setVisible(true);
        this.usersList_frame.requestFocus();

        try {
            ArrayList<User> users = q.readAllUsers();
            
            DefaultTableModel dtm = (DefaultTableModel) this.usersList_table.getModel();

            if (this.usersList_table.getRowCount() > 0) {
                System.out.println("DEBUG - Tabla Users - Ya hay presentes, eliminando...");
                dtm.setRowCount(0);
            }

            for (User u : users) {
                String type = q.getUser(u.getId()).getUserType().toString();
                Object[] row = new Object[]{u.getId(), u.getName(), u.getSurname(), u.getUsername(), u.getBirthDate(), type};
                dtm.addRow(row);
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Main_AdminView.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_usersList_miActionPerformed

    // Actualiza las informaciones del ticket en la barra de informaciones a la derecha
    private void updateTicket() {

        try {

            System.out.println("DEBUG - updateTicket - Selected rows: " + tickets_table.getSelectionModel().getSelectedItemsCount());
            
            if (tickets_table.getRowCount() == 0) return;

            if (tickets_table.getSelectionModel().isSelectionEmpty()) {
                tickets_table.setRowSelectionInterval(0, 0);
            }
                        
            int selectedRow = tickets_table.getSelectedRow();

            int valueAt = (int) tickets_table.getValueAt(selectedRow, 0);

            System.out.println("DEBUG - Selected " + valueAt);

            try {
                selectedTicket = q.readTicket(valueAt);
            } catch (SQLException ex) {
                Logger.getLogger(Main_AdminView.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

            // Actualiza datos
            User temp = q.getUser(selectedTicket.getCreator());

            data_id_view_label2.setText(selectedTicket.getId() + "");
            data_date_view_label2.setText(selectedTicket.getDatetime().format(Ticket.formatter));
            data_creator_view_label2.setText(selectedTicket.getCreator() + " (" + temp.getName() + " " + temp.getSurname() + ")");
            data_creator_view_label2.setToolTipText(temp.getName() + " " + temp.getSurname());

            if (selectedTicket.getTechnician() == 0) {
                data_technician_view_label2.setText("No");
                data_technician_view_label2.setToolTipText("Ningún técnico asignado");
            } else {
                temp = q.getUser(selectedTicket.getTechnician());
                data_technician_view_label2.setText(selectedTicket.getTechnician() + " (" + temp.getName() + " " + temp.getSurname() + ")");
                data_technician_view_label2.setToolTipText(temp.getName() + " " + temp.getSurname());
            }

            data_priority_view_cb2.setSelectedIndex(selectedTicket.getPriorityInt());
            data_status_view_cb2.setSelectedIndex(selectedTicket.getStatusInt());
            data_scalability_view_cb2.setSelectedIndex(selectedTicket.getScalabilityInt());

            description_view_ta2.setText(selectedTicket.getDescription());
        } catch (SQLException ex) {
            Logger.getLogger(Main_AdminView.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void dbReload() throws SQLException {
        allowTableSelListener = false;
        System.out.println("DEBUG - Reloading DB - Current amount of tickets: " + this.tickets_table.getRowCount());

        if (this.tickets_table.getRowCount() > 0) {
            DefaultTableModel dtm = (DefaultTableModel) this.tickets_table.getModel();
            dtm.setRowCount(0);
        }

        ArrayList<Ticket> tickets = q.readAllTickets();

        for (Ticket t : tickets) {
            Object[] row = {t.getId(), t.getDatetime().format(Ticket.formatter), t.getCreator(), t.getDescription()};
            model.addRow(row);
        }

        if (tickets.size() > 0) {
            this.tickets_table.setRowSelectionInterval(0, 0);
        }

        allowTableSelListener = true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_AdminView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_AdminView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_AdminView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_AdminView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_AdminView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTask_cancel_btn;
    private javax.swing.JButton addTask_confirm_btn;
    private javax.swing.JLabel addTask_desc_label;
    private javax.swing.JTextArea addTask_desc_ta;
    private javax.swing.JFrame addTask_frame;
    private javax.swing.JPanel addTask_panel;
    private javax.swing.JButton addTicket_admin_cancel_btn;
    private javax.swing.JButton addTicket_admin_confirm_btn;
    private javax.swing.JLabel addTicket_admin_creator_label;
    private javax.swing.JTextArea addTicket_admin_desc_ta;
    private javax.swing.JFrame addTicket_admin_frame;
    private javax.swing.JComboBox<String> addTicket_admin_priority_cb;
    private javax.swing.JComboBox<String> addTicket_admin_scalability_cb;
    private javax.swing.JComboBox<String> addTicket_admin_status_cb;
    private javax.swing.JComboBox<String> addTicket_admin_tech_cb;
    private javax.swing.JButton add_btn;
    private javax.swing.JPanel adminview_panel;
    private javax.swing.JButton assignTech_view_btn2;
    private javax.swing.JPanel clientview_panel;
    private javax.swing.JButton closeTicket_view_btn;
    private javax.swing.JButton closeTicket_view_btn1;
    private javax.swing.JLabel creator_history_label;
    private javax.swing.JLabel creator_view_label;
    private javax.swing.JLabel creator_view_label1;
    private javax.swing.JLabel creator_view_label2;
    private javax.swing.JLabel data_creator_history_label;
    private javax.swing.JLabel data_creator_view_label;
    private javax.swing.JLabel data_creator_view_label1;
    private javax.swing.JLabel data_creator_view_label2;
    private javax.swing.JLabel data_date_history_label;
    private javax.swing.JLabel data_date_view_label;
    private javax.swing.JLabel data_date_view_label1;
    private javax.swing.JLabel data_date_view_label2;
    private javax.swing.JButton data_description_update_btn;
    private javax.swing.JPanel data_history_panel;
    private javax.swing.JLabel data_id_view_label;
    private javax.swing.JLabel data_id_view_label1;
    private javax.swing.JLabel data_id_view_label2;
    private javax.swing.JComboBox<String> data_priority_view_cb1;
    private javax.swing.JComboBox<String> data_priority_view_cb2;
    private javax.swing.JLabel data_priority_view_label;
    private javax.swing.JComboBox<String> data_scalability_view_cb2;
    private javax.swing.JLabel data_selected_label;
    private javax.swing.JComboBox<String> data_status_view_cb2;
    private javax.swing.JLabel data_status_view_label;
    private javax.swing.JLabel data_status_view_label1;
    private javax.swing.JLabel data_technician_view_label;
    private javax.swing.JLabel data_technician_view_label1;
    private javax.swing.JLabel data_technician_view_label2;
    private javax.swing.JLabel dateTime_statusbar_label;
    private javax.swing.JLabel date_history_label;
    private javax.swing.JLabel date_view_label;
    private javax.swing.JLabel date_view_label1;
    private javax.swing.JLabel date_view_label2;
    private javax.swing.JButton delete_btn;
    private javax.swing.JLabel description_history_label;
    private javax.swing.JTextArea description_history_ta;
    private javax.swing.JLabel description_view_label;
    private javax.swing.JLabel description_view_label1;
    private javax.swing.JLabel description_view_label2;
    private javax.swing.JTextArea description_view_ta;
    private javax.swing.JTextArea description_view_ta1;
    private javax.swing.JTextArea description_view_ta2;
    private javax.swing.JMenu export_menu;
    private javax.swing.JMenuItem export_ticket_details_PDF;
    private javax.swing.JMenu export_ticket_details_menu;
    private javax.swing.JMenuItem export_tickets_PDF;
    private javax.swing.JMenu export_tickets_table_menu;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JButton filter_btn;
    private javax.swing.JComboBox<String> filter_selector_cb;
    private javax.swing.JTextField filter_tf;
    private javax.swing.JMenuItem forceDBReload_mi;
    private javax.swing.JMenu help_jm;
    private javax.swing.JLabel id_view_label;
    private javax.swing.JLabel id_view_label1;
    private javax.swing.JLabel id_view_label2;
    private javax.swing.JMenuItem info_mi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem logout_mi;
    private javax.swing.JLabel priority_view_label;
    private javax.swing.JLabel priority_view_label1;
    private javax.swing.JLabel priority_view_label2;
    private javax.swing.JMenuItem register_mi;
    private javax.swing.JButton reset_btn;
    private javax.swing.JLabel scalability_view_label2;
    private javax.swing.JLabel selected_label;
    private javax.swing.JLabel status_view_label;
    private javax.swing.JLabel status_view_label1;
    private javax.swing.JLabel status_view_label2;
    private javax.swing.JLabel statusbar_user_label;
    private javax.swing.JButton taskHistory_viewHistory;
    private javax.swing.JButton taskHistory_view_btn;
    private javax.swing.JButton taskHistory_view_btn1;
    private javax.swing.JButton tasksHistory_add_btn;
    private javax.swing.JButton tasksHistory_del_btn;
    private javax.swing.JFrame tasksHistory_frame;
    private javax.swing.JTable tasksHistory_table;
    private javax.swing.JButton techSelect_cancel_btn;
    private javax.swing.JButton techSelect_confirm_btn;
    private javax.swing.JButton techSelect_remove_btn;
    private javax.swing.JFrame techSelection_frame;
    private javax.swing.JPanel techSelection_panel;
    private javax.swing.JTable techSelection_table;
    private javax.swing.JLabel technician_view_label;
    private javax.swing.JLabel technician_view_label1;
    private javax.swing.JLabel technician_view_label2;
    private javax.swing.JPanel technicianview_panel;
    private javax.swing.JTable tickets_table;
    private javax.swing.JMenu update_mi;
    private javax.swing.JFrame usersList_frame;
    private javax.swing.JMenuItem usersList_mi;
    private javax.swing.JPanel usersList_panel;
    private javax.swing.JTable usersList_table;
    // End of variables declaration//GEN-END:variables
}
